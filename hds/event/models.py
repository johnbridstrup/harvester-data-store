from django.db import models
from taggit.managers import TaggableManager
from taggit.models import TaggedItemBase
from common.models import CommonInfo

import uuid


def create_model_tag_class(model_name: str):
    """Create TaggedItem class for `model_name`

    Args:
        model_name (str): Name of tagged model

    Returns:
        TaggedItemBase: TaggedItem through model
    """
    attrs = {
        "__module__": "event.models", 
        "Meta": TaggedItemBase.Meta,
        "content_object": models.ForeignKey(model_name, on_delete=models.CASCADE),
    }
    return type(f"{model_name}Tag", (TaggedItemBase,), attrs)


def TaggedUUIDModelFactory(model_name: str):
    """Create base model and tag classes for UUID indexed models with tags

    Args:
        model_tag (str): Name of the model
    """
    
    ModelTag = create_model_tag_class(model_name)

    class TaggedUUIDModelBase(CommonInfo):
        UUID = models.CharField(max_length=40, unique=True)
        tags = TaggableManager(through=ModelTag)

        def __str__(self):
            return f"{self.__class__} UUID: {self.UUID}"

        @classmethod
        def generate_uuid(cls):
            return str(uuid.uuid1())
        
        class Meta:
            abstract = True
            indexes = [
                models.Index(fields=['UUID',])
            ]

    return TaggedUUIDModelBase
    

class Event(TaggedUUIDModelFactory('Event')):
    """Abstraction of "events" so that multiple different
    reports or other objects generated by an event can be linked.

    E.g.; error reports and sessclips
    """
    pass

    
class EventModelMixin(models.Model):
    """Mixin class for models that are associated with events.
    """
    event = models.ForeignKey(Event, on_delete=models.CASCADE)

    @property
    def event_uuid(self):
        return self.event.UUID

    class Meta:
        abstract = True
