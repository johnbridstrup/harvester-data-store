# Generated by Django 4.0.4 on 2023-01-18 19:21

import structlog

from django.core.paginator import Paginator
from django.db import migrations, models

from exceptions.utils import sort_exceptions

logger = structlog.get_logger(__name__)


def get_primary_errors(apps, schema_editor):
    ErrorReport = apps.get_model('errorreport', 'errorreport')
    paginator = Paginator(ErrorReport.objects.all(), 1000)

    for page in range(1, paginator.num_pages + 1):
        logger.info(f"Page {page}")
        for report in paginator.page(page).object_list:
            excs = sort_exceptions(report.exceptions.all())
            if len(excs) > 0:
                excs[0].primary = True
                excs[0].save()

class Migration(migrations.Migration):

    dependencies = [
        ('exceptions', '0009_aftexceptioncodemanifest_aftexceptioncode_manifest'),
    ]

    operations = [
        migrations.AddField(
            model_name='aftexception',
            name='primary',
            field=models.BooleanField(default=False),
        ),
        migrations.RunPython(get_primary_errors),
    ]
