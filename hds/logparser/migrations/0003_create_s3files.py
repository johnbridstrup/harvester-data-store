# Generated by Django 4.0.4 on 2023-01-12 18:38

import structlog

from django.core.paginator import Paginator
from django.db import migrations

from common.utils import get_key
from event.models import Event as Ev

# from s3file.models import S3File, SessClip

logger = structlog.get_logger(__name__)


def create_s3files(apps, schema_editor):
    Event = apps.get_model("event", "event")
    LogSession = apps.get_model("logparser", "LogSession")
    SessClip = apps.get_model("s3file", "SessClip")
    S3File = apps.get_model("s3file", "s3file")
    User = apps.get_model("auth", "User")

    paginator = Paginator(LogSession.objects.all(), 1000)
    logger.info("Creating S3Files from LogSessions")
    for page in range(1, paginator.num_pages + 1):
        logger.info(f"Page {page}")
        for logsession in paginator.page(page).object_list:
            creator = User.objects.get(id=logsession.creator.id)
            key = get_key(logsession.zip_file)
            try:
                s3file_data = {
                    "key": key,
                    "filetype": "sessclip",
                    "file": logsession.zip_file,
                    "creator": creator,
                }
            except ValueError:
                logger.info(f"No file associated with LogSession ID {logsession.id}")
                continue

            event_uuid = Ev.generate_uuid()
            event = Event.objects.create(
                UUID=event_uuid, tags=["sessclip"], creator=creator
            )
            s3file = S3File.objects.create(**s3file_data, event=event)
            sessclip = SessClip.objects.create(file=s3file)
            logsession._zip_file = sessclip
            logsession.save()


class Migration(migrations.Migration):

    dependencies = [
        ("logparser", "0002_logsession__zip_file"),
    ]

    operations = [
        migrations.RunPython(create_s3files),
    ]
