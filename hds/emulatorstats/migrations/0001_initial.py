# Generated by Django 4.1 on 2023-06-07 16:54

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("location", "0002_location_site_channel"),
        ("event", "0006_picksession_harvester_picksession_location_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("harvester", "0007_alter_fruit_name_alter_harvester_name_and_more"),
        ("taggit", "0005_auto_20220424_2025"),
    ]

    operations = [
        migrations.CreateModel(
            name="EmustatsReport",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("lastModified", models.DateTimeField(auto_now=True)),
                ("reportTime", models.DateTimeField(blank=True, null=True)),
                ("report", models.JSONField(blank=True, null=True)),
                ("scene", models.CharField(max_length=127)),
                ("branch", models.CharField(max_length=127)),
                ("date", models.CharField(max_length=31)),
                ("runner", models.CharField(blank=True, max_length=63, null=True)),
                ("elapsed_seconds", models.FloatField()),
                ("mm_traveled", models.FloatField()),
                ("num_grip_attempts", models.IntegerField()),
                ("grip_success_percentage", models.FloatField(blank=True, null=True)),
                ("num_pick_attempts", models.IntegerField()),
                ("pick_success_percentage", models.FloatField(blank=True, null=True)),
                ("thoroughness_percentage", models.FloatField(blank=True, null=True)),
                (
                    "detection_success_percentage",
                    models.FloatField(blank=True, null=True),
                ),
                ("num_cand_overlaps", models.IntegerField()),
                ("rmse_localization_mm", models.FloatField()),
                ("num_fruit_collisions", models.IntegerField()),
                ("num_leaf_collisions", models.IntegerField()),
                ("num_bed_collisions", models.IntegerField()),
                ("num_pick_cands", models.IntegerField()),
                ("num_no_pick_cands", models.IntegerField()),
                ("num_false_ripe", models.IntegerField()),
                ("num_false_unripe", models.IntegerField()),
                ("avg_ripeness_pick", models.FloatField(blank=True, null=True)),
                ("avg_ripeness_no_pick", models.FloatField(blank=True, null=True)),
                ("total_targets", models.IntegerField()),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_creator_related",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "event",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="event.event"
                    ),
                ),
                (
                    "harvester",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="harvester.harvester",
                    ),
                ),
                (
                    "location",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="location.location",
                    ),
                ),
                (
                    "modifiedBy",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_modifiedby_related",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pick_session",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="event.picksession",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="EmustatsTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "content_object",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="emulatorstats.emustatsreport",
                    ),
                ),
                (
                    "tag",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="%(app_label)s_%(class)s_items",
                        to="taggit.tag",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="emustatsreport",
            name="tags",
            field=taggit.managers.TaggableManager(
                help_text="A comma-separated list of tags.",
                through="emulatorstats.EmustatsTag",
                to="taggit.Tag",
                verbose_name="Tags",
            ),
        ),
    ]
